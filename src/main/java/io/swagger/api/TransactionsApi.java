/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.DTOTransactionReceive;
import io.swagger.model.DTOTransactionSend;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-06-02T15:38:47.810Z[GMT]")
@Validated
public interface TransactionsApi {

    @Operation(summary = "Gets single transfer from logged in account", description = "Retrieves a single transaction by using the id parameter", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Detail of single transaction", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DTOTransactionReceive.class))),
        
        @ApiResponse(responseCode = "400", description = "Error in the transaction"),
        
        @ApiResponse(responseCode = "404", description = "Resource not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/transactions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DTOTransactionReceive> getTransferById(@Parameter(in = ParameterIn.PATH, description = "Numeric id of the transaction to get", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Gets list of transfers on a specific IBAN by time stamp", description = "Gets list of transfers on a specific IBAN", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Retrieved list of transactions for account", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DTOTransactionReceive.class)))),
        
        @ApiResponse(responseCode = "400", description = "Error in the transaction"),
        
        @ApiResponse(responseCode = "403", description = "Error: Unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Resource not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DTOTransactionReceive>> getTransfers(@Parameter(in = ParameterIn.QUERY, description = "amount of transactions to return" ,schema=@Schema()) @Valid @RequestParam(value = "count", required = false) Integer count, @Parameter(in = ParameterIn.QUERY, description = "amount of transactions to skip" ,schema=@Schema()) @Valid @RequestParam(value = "skip", required = false) Integer skip, @Parameter(in = ParameterIn.QUERY, description = "value of transaction" ,schema=@Schema()) @Valid @RequestParam(value = "value", required = false) BigDecimal value, @Parameter(in = ParameterIn.QUERY, description = "iban of account whose transactions to retrieve" ,schema=@Schema()) @Valid @RequestParam(value = "iban", required = false) String iban, @Parameter(in = ParameterIn.QUERY, description = "start date of transactions to return" ,schema=@Schema()) @Valid @RequestParam(value = "startDate", required = false) String startDate, @Parameter(in = ParameterIn.QUERY, description = "final date of transaction to return" ,schema=@Schema()) @Valid @RequestParam(value = "endDate", required = false) String endDate);


    @Operation(summary = "Transfers money to other account", description = "Transfers money from currently logged in account to other account specified", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Money transferred", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DTOTransactionReceive.class)))),
        
        @ApiResponse(responseCode = "400", description = "Error in the transaction"),
        
        @ApiResponse(responseCode = "403", description = "Error: unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Error: not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<DTOTransactionReceive>> transferMoney(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody DTOTransactionSend body);

}

