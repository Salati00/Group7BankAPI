/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.DTOAccountReceive;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-06-02T15:38:47.810Z[GMT]")
@Validated
public interface AccountsApi {

    @Operation(summary = "Create an Account", description = "This can only be done by the logged in user.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Account was successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DTOAccountReceive.class))),
        
        @ApiResponse(responseCode = "400", description = "Wrong Parameters"),
        
        @ApiResponse(responseCode = "404", description = "Resource not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DTOAccountReceive> createcurrentaccount(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Minimum Value that the account can hold" ,required=true,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "Absolute limit", required = true, defaultValue="0") BigDecimal absoluteLimit, @Parameter(in = ParameterIn.QUERY, description = "ID of the user for which to make an account" ,schema=@Schema()) @Valid @RequestParam(value = "User ID", required = false) Integer userID);


    @Operation(summary = "Deactivates a user", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Account not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/accounts/{iban}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteaccount(@Parameter(in = ParameterIn.PATH, description = "The ID of the account that needs to be deleted", required=true, schema=@Schema()) @PathVariable("iban") String iban);


    @Operation(summary = "Deposits money", description = "Deposits money into logged in account", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Money deposited"),
        
        @ApiResponse(responseCode = "400", description = "Error in the transaction"),
        
        @ApiResponse(responseCode = "403", description = "Error: unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Resource not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/accounts/deposit",
        method = RequestMethod.POST)
    ResponseEntity<Void> depositMoney(@Parameter(in = ParameterIn.QUERY, description = "Amount of money to deposit" ,schema=@Schema()) @Valid @RequestParam(value = "Amount", required = false) BigDecimal amount);


    @Operation(summary = "Find Account by Iban", description = "Returns a single Account", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DTOAccountReceive.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Iban supplied"),
        
        @ApiResponse(responseCode = "404", description = "Account Not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/accounts/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DTOAccountReceive> getAccountByIban(@Parameter(in = ParameterIn.PATH, description = "Iban of account to return", required=true, schema=@Schema()) @PathVariable("iban") String iban);


    @Operation(summary = "Update an existing account", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Account was successfully edited", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DTOAccountReceive.class))),
        
        @ApiResponse(responseCode = "404", description = "Account not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/accounts/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<DTOAccountReceive> updateAccount(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Minimum Value that the account can hold" ,required=true,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "Absolute limit", required = true, defaultValue="0") BigDecimal absoluteLimit, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Whether the account has been disabled for soft deletion" ,required=true,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "Disabled", required = true, defaultValue="false") Boolean disabled, @Parameter(in = ParameterIn.PATH, description = "The ID of the account that needs to be deleted", required=true, schema=@Schema()) @PathVariable("iban") String iban);


    @Operation(summary = "Withdraws money", description = "Withdraws money from logged in account", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Money Withdrawn"),
        
        @ApiResponse(responseCode = "400", description = "Error in the transaction"),
        
        @ApiResponse(responseCode = "403", description = "Error: unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Resource Not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/accounts/withdraw",
        method = RequestMethod.POST)
    ResponseEntity<Void> withdrawMoney(@Parameter(in = ParameterIn.QUERY, description = "Amount of money to withdraw" ,schema=@Schema()) @Valid @RequestParam(value = "Amount", required = false) BigDecimal amount);

}

