openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Salati00/Bank-API-Final/3.0
info:
  description: This is a simple API
  version: '3.0'
  title: Bank API
  contact:
    email: g.salati.0115@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Users
    description: Operations related to users
  - name: Transactions
    description: Operations related to cash operations
  - name: Accounts
    description: Operations related to Accounts
paths:
  /Users:
    get:
      tags:
        - Users
      summary: Get all users registered on the system.
      description: Fetches the entire list of users stored on the system.
      operationId: getAllUsers
      parameters:
      # search by last name
        - in: query
          name: lastName
          schema:
            type: string
          description: the user name to be searched
      # search by id  
        - in: query
          name: userId
          schema:
            type: integer
            format: int64
            minimum: 1
          description: the userId to be fetched
         # the limit query
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int64
            minimum: 20
            maximum: 50
          description: the limit to get number of users
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
            minimum: 0
          description: the offset to start getting users
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/emailParam"
      responses:
        "200":
          description: Returns a list of users
          content:
            application/json:
              schema:
                maxItems: 50
                type: array
                items:
                  $ref: "#/components/schemas/DTO_User_Receive"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have access rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server.
        '201':
          description: Created
        '409':
          description: Conflict
    post:
      tags:
        - Users
      summary: Registers a user.
      description: Register a user to the system.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DTO_User_Send"
      responses:
        "201":
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DTO_User_Receive"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have access rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server.
        '409':
          description: Conflict
  /Users/{id}/accounts:
    get:
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      summary: receive user's account
      description: returning a list of accounts
      operationId: get all acounts from the user
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/DTO_Account_Receive'
    
  /Users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by their ID.
      description: Fetches a user from the system by the ID provided.
      operationId: getUserById
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      summary: Update a user.
      description: User(customer - employee) can update their information.
      operationId: updateUserById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "201":
          description: Information has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have access rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server.
        
        '409':
          description: Conflict        

    delete:
      summary: Delete a user.
      tags:
      - Users
      description: Change user accountStatus to Inactive.
      operationId: deleteUserById
      parameters:
      - $ref:  "#/components/parameters/userIdParam"
      responses:
        "204":
          description: User set as inactive.
        '400':
          description: Invalid username supplied
        '404':
          description: User not found 
        '201':
          description: User deleted  

  /Users/Login/:
    post:
      security: []
      summary: User login.
      tags:
        - Users
      description: login
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: User logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BearerTokenDto"
        "400":
          description: Invalid input
        "403":
          description: Forbidden, you do not have access rights
        "404":
          description: Not found
        "500":
          description: Oops, something went wrong on the server.
        
        '409':
          description: Conflict         

  /transactions:
    post:
      tags:
        - Transactions
      summary: Transfers money to other account
      operationId: transferMoney
      description: Transfers money from currently logged in account to other account specified
      responses:
        '200':
          description: "Money transferred"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTO_Transaction_Receive'
        '400':
          description: "Error in the transaction"
        '403':
          description: "Error: unauthorized"
        '404':
          description: "Error: not found"
        '500':
          description: "Internal Server Error"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DTO_Transaction_Send"

    get:
      tags:
        - Transactions
      summary: Gets list of transfers on a specific IBAN by time stamp
      operationId: getTransfers
      description: Gets list of transfers on a specific IBAN
      parameters:
      - in: query
        name: count
        description: amount of transactions to return
        schema:
          type: integer
      - in: query
        name: skip
        description: amount of transactions to skip
        schema:
          type: integer
      - in: query
        name: value
        description: value of transaction
        schema:
          type: number
      - in: query
        name: iban
        description: iban of account whose transactions to retrieve
        schema:
          type: string
      - in: query
        name: startDate
        description: start date of transactions to return
        schema:
          type: string
      - in: query
        name: endDate
        description: final date of transaction to return
        schema:
          type: string
      responses:
        '200':
          description: "Retrieved list of transactions for account"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTO_Transaction_Receive'
        '400':
          description: "Error in the transaction"
        '403':
          description: "Error: Unauthorized"
        '404':
          description: "Resource not found"
        '500':
          description: "Internal Server Error"

  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: "Gets single transfer from logged in account"
      parameters: 
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: "Numeric id of the transaction to get"
      operationId: getTransferById
      description: "Retrieves a single transaction by using the id parameter"
      responses:
        '200':
          description: "Detail of single transaction"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTO_Transaction_Receive'
        '400':
          description: "Error in the transaction"
        '404':
          description: "Resource not found"
        '500':
          description: "Internal Server Error"
  /accounts:
    post:
      tags:
        - Accounts
      summary: Create an Account
      description: This can only be done by the logged in user.
      operationId: createcurrentaccount
      responses:
        '201':
          description: Account was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTO_Account_Receive'
        '400':
          description: Wrong Parameters
        '404':
          description: "Resource not found"
        '500':
          description: "Internal Server Error"
      parameters:
        - in: query
          name: User ID
          description: ID of the user for which to make an account
          schema:
            type: integer
        - in: query
          name: Absolute limit
          description: Minimum Value that the account can hold
          schema:
            type: number
            default: 0
          required: true
  /accounts/deposit:
    post:
      tags:
        - Accounts
      summary: Deposits money
      operationId: depositMoney
      description: Deposits money into logged in account
      responses:
        '200':
          description: "Money deposited"
        '400':
          description: "Error in the transaction"
        '403':
          description: "Error: unauthorized"
        '404':
          description: "Resource not found"
        '500':
          description: "Internal Server Error"
      parameters:
        - in: query
          name: Amount
          description: Amount of money to deposit
          schema:
            type: number
            example: "123.56"
  /accounts/withdraw:
    post:
      tags:
        - Accounts
      summary: Withdraws money
      operationId: withdrawMoney
      description: Withdraws money from logged in account
      responses:
        '200':
          description: "Money Withdrawn"
        '400':
          description: "Error in the transaction"
        '403':
          description: "Error: unauthorized"
        '404':
          description: "Resource Not found"
        '500':
          description: "Internal Server Error"
      parameters:
        - in: query
          name: Amount
          description: Amount of money to withdraw
          schema:
            type: number
            example: "123.56"
  /accounts/{iban}:
    put:
      tags:
        - Accounts
      summary: Update an existing account
      operationId: updateAccount
      responses:
        '204':
          description: Account was successfully edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTO_Account_Receive'
        '404':
          description: Account not found
        '405':
          description: Validation exception
        '500':
          description: Internal Server Error
      parameters:
        - in: query
          name: Absolute limit
          description: Minimum Value that the account can hold
          schema:
            type: number
            default: 0
          required: true
        - in: query
          name: Disabled
          description: Whether the account has been disabled for soft deletion
          schema:
            type: boolean
            default: false
          required: true
        - name: iban
          in: path
          description: The ID of the account that needs to be deleted
          required: true
          schema:
            type: string
    delete:
      tags:
        - Accounts
      summary: Deactivates a user
      operationId: deleteaccount
      parameters:
        - name: iban
          in: path
          description: The ID of the account that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '500':
          description: Internal Server Error
    get:
      tags:
      - Accounts
      summary: Find Account by Iban
      description: Returns a single Account
      operationId: getAccountByIban
      parameters:
        - name: iban
          in: path
          description: Iban of account to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTO_Account_Receive'
        '400':
          description: Invalid Iban supplied
        '404':
          description: Account Not found
        '500':
          description: Internal Server Error
components:
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        x_authtoken:
          schema:
            type: string
  schemas:
    User:
      type: object
      required: 
        - username
        - Role
      properties:
        id:
          type: integer
          format: int64
          example: 123
        username:
          type: string
          example: 'JohnDoe123'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        email:
          type: string
          example: 'JohnDoe123@hotmail.com'
        phone:
          type: string
          example: '0612345678'
        transactionLimit:
          type : number
          example: 10000
        dailylimit:
          type : number
          example: 10000
        Role:
          $ref: '#/components/schemas/Role'
    DTO_Transaction_Receive:
      type: object
      required:
      - id
      - Amount
      - To
      - From
      - UserPerformingID
      properties:
        id: 
          type: integer
          example: 1234
        Date:
          type: string
          example: "01/01/2000"
        Amount:
          type: number
          example: 123.45
        To:
          type: string
          example: "NL91 ABNA 0417 1643 00"
        From:
          type: string
          example: "NL91 ABNA 0417 1643 00"
        UserPerformingID:
          type: integer
          example: 54398
    
    DTO_Transaction_Send:
      type: object
      required:
      - from
      - to
      - amount
      properties:
        from:
          type: string
          example: "NL91 ABNA 0417 1643 00"
        to:
          type: string
          example: "NL91 ABNA 0417 1643 00"
        amount:
          type: number
          example: 123.45
    

    DTO_Account_Receive:
      type: object
      required:
      - balance
      - dailylimit
      - AccountType
      - Absolutelimit
      - Disabled
      properties:
        iban:
          type: string
          example: NL91 ABNA 0417 1643 00
        balance:
          type : number
          example: 5000
        Absolutelimit:
          type : number
          example: 0
        AccountType:
          $ref: '#/components/schemas/AccountType'
        UserId:
          type : integer
          example: 123
        Disabled:
          type: boolean
          default: false
    AccountType:
          type: string
          enum:
          - Currentaccount
          - Savingaccount
    Role:
          type: string
          enum:
          - User
          - Employee
    DTO_User_Send:
        type: object
        required:
          - username
          - firstname
          - lastname
          - email
          - phone
          - transactionLimit
          - dailylimit
          - role
        properties:
          username:
            type: string
            example: login credentials
          firstName:
            type: string
            example: Gigi
          lastName:
            type: string
            example: D'alessio
          email:
            type: string
            example: gigidalessio@gmail.it
          phone:
            type: number
            example: 34595603123
          transactionLimit:
            type: number
            example: 99999
          dailylimit:
            type: number
            example: 9999
          roles:
            type: array
            items:
              $ref: '#/components/schemas/Role'
    DTO_User_Receive:
        type: object
        required:
          - id
          - username
          - firstname
          - lastname
          - email
          - phone
          - transactionLimit
          - dailylimit
          - role
        properties:
          id:
            type: integer
            example: 1
          username:
            type: string
            example: login credentials
          firstName:
            type: string
            example: Gigi
          lastName:
            type: string
            example: D'alessio
          email:
            type: string
            example: gigidalessio@gmail.it
          phone:
            type: number
            example: 34595603123
          transactionLimit:
            type: number
            example: 99999
          dailylimit:
            type: number
            example: 9999
          roles:
            type: array
            items:
              $ref: '#/components/schemas/Role'

    LoginDto:
      type: object
      additionalProperties: false
      properties:
        email:
          type: string
          example: ing@gmail.com
        password:
          type: string
          example: passwordExample111
    BearerTokenDto:
      type: object
      properties:
        bearerToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI
  requestBodies:
    Account:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DTO_Account_Receive'
      description: Updating an existing account
      required: true
# Parameters are for paginated endpoints
  parameters:
    userIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: UUID
        example: 4a090b27-5300-456a-8041-4c63a5e31436

    emailParam:
      name: email
      in: query
      required: true
      schema:
        type: string
        example: "robertbanks@gmail.com"

    limitParam:
      name: max
      in: query
      required: false
      description: The maximum number of items to return.
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 50
        example: 15
        default: 10

    offsetParam:
      in: query
      required: false
      name: offset
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        format: int32
        example: 60
        minimum: 0


  # Implementing bearer authentication
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# Applying the security globally to all operations
security:
  - bearerAuth: []